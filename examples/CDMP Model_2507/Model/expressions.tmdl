expression DT =
		let
		    Source = Oracle.Database("CDMP", [HierarchicalNavigation=true, Query="WITH base_calendar AS#(lf) (#(lf)    SELECT#(lf)        currdate                                                                                                             AS day_id,#(lf)        INITCAP(RTRIM(TO_CHAR(currdate,'MONTH'))) ||' ' || TO_CHAR(currdate,'DD') || ', ' || RTRIM(TO_CHAR(currdate,'YYYY')) AS day_name,#(lf)        1                                                                                                                    AS num_days_in_day,#(lf)        currdate                                                                                                             AS day_end_date,#(lf)        TO_CHAR(currdate,'Day')                                                                                              AS week_day_full,#(lf)        TO_CHAR(currdate,'DY')                                                                                               AS week_day_short,#(lf)        to_number(TRIM(LEADING '0' FROM TO_CHAR(currdate,'D')))                                                              AS day_num_of_week,#(lf)        to_number(TRIM(LEADING '0' FROM TO_CHAR(currdate,'DD')))                                                             AS day_num_of_month,#(lf)        to_number(TRIM(LEADING '0' FROM TO_CHAR(currdate,'DDD')))                                                            AS day_num_of_year,#(lf)        initcap(TO_CHAR(currdate,'Mon') || '-' || TO_CHAR(currdate,'YY'))                                                    AS month_id,#(lf)        TO_CHAR(currdate,'Mon') || ' ' || TO_CHAR(currdate,'YYYY')                                                           AS month_short_desc,#(lf)        rtrim(TO_CHAR(currdate,'Month')) || ' ' || TO_CHAR(currdate,'YYYY')                                                  AS month_long_desc,#(lf)        TO_CHAR(currdate,'Mon')                                                                                              AS month_short,#(lf)        TO_CHAR(currdate,'Month')                                                                                            AS month_long,#(lf)        to_number(TRIM(LEADING '0' FROM TO_CHAR(currdate,'MM')))                                                             AS month_num_of_year,#(lf)        'Q' || upper(TO_CHAR(currdate,'Q') || TO_CHAR(currdate,'YYYY'))                                                      AS quarter_id,#(lf)        'Q' || upper(TO_CHAR(currdate,'Q') || '-' || TO_CHAR(currdate,'YYYY'))                                               AS quarter_name,#(lf)        to_number(TO_CHAR(currdate,'Q') ) AS quarter_num_of_year,#(lf)        CASE#(lf)                WHEN to_number(TO_CHAR(currdate,'Q') ) <= 2 THEN 1#(lf)                ELSE 2#(lf)            END                                                                                                              AS half_num_of_year,#(lf)        CASE#(lf)           WHEN to_number(TO_CHAR(currdate,'Q') ) <= 2#(lf)                  THEN 'H' || 1 || '-' || TO_CHAR(currdate,'YYYY')#(lf)                  ELSE 'H' || 2 || '-' || TO_CHAR(currdate,'YYYY')#(lf)            END                                                                                                              AS half_of_year_id,#(lf)        TO_CHAR(currdate,'YYYY')                                                                                             AS year_id#(lf)    FROM#(lf)        (#(lf)            SELECT#(lf)                level n,#(lf)                -- Calendar starts at the day after this date.#(lf)                TO_DATE('31/12/2000','DD/MM/YYYY') + numtodsinterval(level,'DAY') currdate#(lf)            FROM#(lf)                dual#(lf)             -- Change for the number of days to be added to the table.#(lf)            CONNECT BY#(lf)                level <= 14611#(lf)        )#(lf)) SELECT#(lf)    day_id                                    AS day_id,#(lf)    day_name                                  AS day_name,#(lf)    num_days_in_day                           AS num_days_in_day,#(lf)    day_end_date                              AS day_end_date,#(lf)    day_num_of_week                           AS day_num_of_week,#(lf)    day_num_of_month                          AS day_num_of_month,#(lf)    day_num_of_year                           AS day_number_in_year,#(lf)    day_num_of_month                          AS day_number_in_month,#(lf)    day_num_of_week                           AS day_number_in_week,#(lf)    month_id                                  AS month_id,#(lf)    month_id                                  AS month_name,#(lf)    COUNT(*) OVER(PARTITION BY month_id)      AS month_time_span,#(lf)    MAX(day_id) OVER(PARTITION BY month_id)   AS month_end_date,#(lf)    month_num_of_year                         AS month_number_in_year,#(lf)    quarter_id                                AS quarter_id,#(lf)    quarter_name                              AS quarter_name,#(lf)    COUNT(*) OVER(PARTITION BY quarter_id)    AS quarter_time_span,#(lf)    MAX(day_id) OVER(PARTITION BY quarter_id) AS quarter_end_date,#(lf)    quarter_num_of_year                       AS quarter_number_in_year,#(lf)    year_id                                   AS year_id,#(lf)    year_id                                   AS year_name,#(lf)    COUNT(*) OVER(PARTITION BY year_id)       AS num_days_in_year,#(lf)    MAX(day_id) OVER(PARTITION BY year_id)    AS year_end_date#(lf)  FROM#(lf)    base_calendar#(lf)ORDER BY#(lf)    day_id"]),
		    #"Filtered Rows" = Table.SelectRows(Source, each true),
		    #"Renamed Columns" = Table.RenameColumns(#"Filtered Rows",{{"DAY_ID", "Dates"}}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"Dates", type date}}),
		    #"Renamed Columns1" = Table.RenameColumns(#"Changed Type",{{"YEAR_ID", "Year"}}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns1",{{"Year", Int64.Type}}),
		    #"Renamed Columns2" = Table.RenameColumns(#"Changed Type1",{{"MONTH_NUMBER_IN_YEAR", "Month"}}),
		    #"Changed Type2" = Table.TransformColumnTypes(#"Renamed Columns2",{{"Month", Int64.Type}}),
		    #"Added Custom" = Table.AddColumn(#"Changed Type2", "Month Name", each Date.MonthName([Dates])),
		    #"Renamed Columns3" = Table.RenameColumns(#"Added Custom",{{"Month Name", "MonthName"}}),
		    #"Changed Type3" = Table.TransformColumnTypes(#"Renamed Columns3",{{"MonthName", type text}})
		in
		    #"Changed Type3"

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

