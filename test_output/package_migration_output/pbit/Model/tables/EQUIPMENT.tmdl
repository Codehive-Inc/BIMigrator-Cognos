table EQUIPMENT


    column 'SITE'
        dataType: string
        summarizeBy: none
        sourceColumn: SITE

        

        annotation SummarizationSetBy = Automatic

        
    column 'MARK_NUMBER'
        dataType: string
        summarizeBy: none
        sourceColumn: MARK_NUMBER

        

        annotation SummarizationSetBy = Automatic

        
    column 'EQUIPMENT_DESC'
        dataType: string
        summarizeBy: none
        sourceColumn: EQUIPMENT_DESC

        

        annotation SummarizationSetBy = Automatic

        
    column 'SERIAL_NUMBER'
        dataType: string
        summarizeBy: none
        sourceColumn: SERIAL_NUMBER

        

        annotation SummarizationSetBy = Automatic

        
    column 'VENDOR_CODE'
        dataType: string
        summarizeBy: none
        sourceColumn: VENDOR_CODE

        

        annotation SummarizationSetBy = Automatic

        
    column 'EQUIPMENT_CRITICALITY'
        dataType: string
        summarizeBy: none
        sourceColumn: EQUIPMENT_CRITICALITY

        

        annotation SummarizationSetBy = Automatic

        
    column 'LAST_ITEM_NUMBER'
        dataType: string
        summarizeBy: none
        sourceColumn: LAST_ITEM_NUMBER

        

        annotation SummarizationSetBy = Automatic

        
    column 'PREFERRED_ITEM_NUMBER'
        dataType: string
        summarizeBy: none
        sourceColumn: PREFERRED_ITEM_NUMBER

        

        annotation SummarizationSetBy = Automatic

        
    column 'EQUIPMENT_STATUS'
        dataType: string
        summarizeBy: none
        sourceColumn: EQUIPMENT_STATUS

        

        annotation SummarizationSetBy = Automatic

        
    column 'STOP'
        dataType: string
        summarizeBy: none
        sourceColumn: STOP

        

        annotation SummarizationSetBy = Automatic

        



    partition 'EQUIPMENT' = m
        mode: import
        source = 
            	let
					Source = Sql.Database(#"DB Server", #"DB Name"),
					// Validate connection
ValidateConnection = try Source otherwise error 
"Failed to connect to database. Error: " & Text.From([Error][Message]),
					// Execute query with folding
ExecuteQuery = Value.NativeQuery(
ValidateConnection, 
"Select",
null,
[EnableFolding=true]
),
					// Validate results
ValidateResults = if Table.IsEmpty(ExecuteQuery) then error "No data returned from query for table EQUIPMENT" else ExecuteQuery,
					// Apply data type transformations
TransformTypes = Table.TransformColumnTypes( ValidateResults, { {"$SITE", type string}, {"$MARK_NUMBER", type string}, {"$EQUIPMENT_DESC", type string}, {"$SERIAL_NUMBER", type string}, {"$VENDOR_CODE", type string}, {"$EQUIPMENT_CRITICALITY", type string}, {"$LAST_ITEM_NUMBER", type string}, {"$PREFERRED_ITEM_NUMBER", type string}, {"$EQUIPMENT_STATUS", type string}, {"$STOP", type string}, {"$SITE", type string}, {"$MARK_NUMBER", type string}, {"$EQUIPMENT_DESC", type string}, {"$SERIAL_NUMBER", type string}, {"$VENDOR_CODE", type string}, {"$EQUIPMENT_CRITICALITY", type string}, {"$LAST_ITEM_NUMBER", type string}, {"$PREFERRED_ITEM_NUMBER", type string}, {"$EQUIPMENT_STATUS", type string}, {"$STOP", type string} } ),
					// Handle nulls appropriately
HandleNulls = Table.ReplaceValue( TransformTypes, null, "", Replacer.ReplaceValue, Table.ColumnNames(TransformTypes) )
				in
					HandleNulls
        



    annotation PBI_ResultType = Table