table MAT_TEST


    column 'RECORD_ID'
        dataType: string
        summarizeBy: none
        sourceColumn: RECORD_ID

        

        annotation SummarizationSetBy = Automatic

        
    column 'COLUMN_1'
        dataType: string
        summarizeBy: none
        sourceColumn: COLUMN_1

        

        annotation SummarizationSetBy = Automatic

        
    column 'COLUMN_2'
        dataType: string
        summarizeBy: none
        sourceColumn: COLUMN_2

        

        annotation SummarizationSetBy = Automatic

        
    column 'COLUMN_3'
        dataType: string
        summarizeBy: none
        sourceColumn: COLUMN_3

        

        annotation SummarizationSetBy = Automatic

        
    column 'COLUMN_4'
        dataType: string
        summarizeBy: none
        sourceColumn: COLUMN_4

        

        annotation SummarizationSetBy = Automatic

        
    column 'COLUMN_5'
        dataType: string
        summarizeBy: none
        sourceColumn: COLUMN_5

        

        annotation SummarizationSetBy = Automatic

        
    column 'COLUMN_6'
        dataType: string
        summarizeBy: none
        sourceColumn: COLUMN_6

        

        annotation SummarizationSetBy = Automatic

        



    partition 'MAT_TEST' = m
        mode: import
        source = 
            	let
					Source = Sql.Database(#"DB Server", #"DB Name"),
					// Validate connection
ValidateConnection = try Source otherwise error 
"Failed to connect to database. Error: " & Text.From([Error][Message]),
					// Execute query with folding
ExecuteQuery = Value.NativeQuery(
ValidateConnection, 
"Select",
null,
[EnableFolding=true]
),
					// Validate results
ValidateResults = if Table.IsEmpty(ExecuteQuery) then error "No data returned from query for table MAT_TEST" else ExecuteQuery,
					// Apply data type transformations
TransformTypes = Table.TransformColumnTypes( ValidateResults, { {"$RECORD_ID", type string}, {"$COLUMN_1", type string}, {"$COLUMN_2", type string}, {"$COLUMN_3", type string}, {"$COLUMN_4", type string}, {"$COLUMN_5", type string}, {"$COLUMN_6", type string}, {"$RECORD_ID", type string}, {"$COLUMN_1", type string}, {"$COLUMN_2", type string}, {"$COLUMN_3", type string}, {"$COLUMN_4", type string}, {"$COLUMN_5", type string}, {"$COLUMN_6", type string} } ),
					// Handle nulls appropriately
HandleNulls = Table.ReplaceValue( TransformTypes, null, "", Replacer.ReplaceValue, Table.ColumnNames(TransformTypes) )
				in
					HandleNulls
        



    annotation PBI_ResultType = Table